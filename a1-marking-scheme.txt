*** Grade before late penalty: [47/54]


[0/2] Compiles without warnings   


[14/16] Instruction Identification - This section is to see if 
      the instructions were properly identified based on the 
      icode and ifun values. 

        [1/1] Halt
        [1/1] NOP
        [1/1] rrmovq
        [1/1] irmovq
        [1/1] rmmovq
        [1/1] mrmovq
        [2/2] arithmetic operations
             2 marks if all of them, 1 if got some
               but not all of them.
        [2/2] jumps         
             2 marks if all of them, 1 if got some
               but not all of them.
        [1/1] call
        [1/1] ret
        [0/1] pushq
        [0/1] popq
        [2/2] conditional move instructions
             2 marks if all of them, 1 if got some
               but not all of them.

[9/9] Instruction decoding

       [3/3] Decoded rA and rB values appropriately. 
            - 2 marks for properly identifying instructions that 
                have rA and rB parts. -1 if misidentified some
                instructions or missed them. 1 mark for properly 
                getting the rA and rB values

       [4/4] valC 
            - 2 marks for properly identifying instructions with a
              valC part. -1 if misidentified some instructions or
              missed them. 
            - 1 mark for getting the valC value correct (i.e. the valC
              column)
            - 1 mark for getting the individual bytes correct (e.g.,
              little endian, long).

       [2/2] File pointer advanced properly for all instructions. 
          

[11/14]  Non-instruction sequence

       [2/2] 2nd nibble (fcode) of instructions halt, nop, rrmovq, irmovq, # failed: 
            rmovq, mrmovq, call, ret, pushq, and popq must be 0
            -1 for each different instruction that doesn't meet this 
               requirement upto -2

       [2/2] identifies invalid function code for jumps, conditional moves, # failed: 
            and math operations
            -1 for each different instruction that doesn't meet this 
               requirement upto -2

       [0/1] Can handle case when not enough bytes in file to determine the # failed: 03_rrmovq.mem # failed: 03_rrmovq.mem
            rA and rB values of an instructions

       [0/1] Can handle case when not enough bytes in file to determine the # failed: 04_irmovq2.mem, 04_irmovq1.mem # failed: 04_irmovq2.mem, 04_irmovq1.mem
            valC value
                
       [4/4] Properly handles invalid instruction or registers,
            printing quad or byte as appropriate
            - 2 marks for deciding if quad or byte should be printed
            - 1 mark for correctly writing the value of them
            - 1 mark for properly moving on to the next address

       [0/1] Ignores halts after another halt # failed: 06_rrmovq_halt.mem # failed: 06_rrmovq_halt.mem

       [1/1] Properly finds the first non-zero byte and prints value for # failed: 
            .pos accordingly

       [1/1] Properly writes .pos after a few consecutive halts # failed: 

       [1/1] In case the third argument is present, starts from the given # failed: 
            address

        
[12/12] Code style and implementation

       [2/2] Reasonable decomposition into functions
 
       [2/2] Avoids excessive code repetition
       
       [1/1] Comments explaining what the code does
 
       [2/2] Style with respect to indentation, line and function length
 
       [1/1] Appropriate names for functions, variables, parameters
 
       [2/2] Reasonable choice of algorithms and approach to handling the problem
 
       [2/2] Misc - You get full marks here unless the marker has added
            comments below and indicated why you lost marks. The purpose
            of this mark category is for the marker to deduct points for
            problems/issues with your assignment that are not properly
            capture in the other more specific parts of the 
            marking rubric.
   
--------------------

[1/1] Filled in Cover Page

-----------------------------------
